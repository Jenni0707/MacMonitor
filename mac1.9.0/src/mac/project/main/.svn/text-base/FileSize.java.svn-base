package mac.project.main;import java.io.File;public class FileSize {       //获得文件夹或者文件的大小，如果要获得磁盘大小用jconfig效率更高       public Long getSize(String strName) {           Long TotalSize = 0L;           File f = new File(strName);        if (f.isFile())               return f.length();           else {               if (f.isDirectory()) {                   File[] contents = f.listFiles();                for (int i = 0; i < contents.length; i++) {                       if (contents[i].isFile())                           TotalSize += contents[i].length();                       else {                           if (contents[i].isDirectory())                               TotalSize += getSize(contents[i].getPath());                       }                   }               }           }           return TotalSize;       }       //    public static void main(String[] args) {   //        long x = FileSize.getSize("/Users/");   //        System.out.println("文件夹的大小"+x);//    }   }  /*import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.regex.Matcher;import java.util.regex.Pattern;public class GetFileSize {	private String path;	private float size;	public GetFileSize(String path) {		this.path = path;	}	public float getFileSize() {		Runtime rt = Runtime.getRuntime();		Process proc;		String line;		String[] str;		String[] cmd = new String[3];		cmd[0] = "/bin/sh";		cmd[1] = "-c";		cmd[2] = "/usr/bin/du -sh " + path; // Example: du -sh /Users/kingc/;		try {			proc = rt.exec(cmd); // Results: 234M /Users/kingc/			InputStreamReader is = new InputStreamReader(proc.getInputStream(),"UTF-8");			BufferedReader br = new BufferedReader(is);			Pattern p = Pattern.compile("\\d{1,8}\\.{0,1}\\d{0,3}[BKMG]"); //4.0K// 123// M// 1.2// G			String[] s = new String[6];			while ((line = br.readLine()) != null) {				Matcher m = p.matcher(line);				int i = 0;				while (m.find()) {					s[i++] = m.group(); // maybe have many matched results				}				if (i != 0) { // the first matched result meets our demand					// System.out.println(s[0]);					if (s[0].endsWith("B")) {						str = s[0].split("B");						size = Float.valueOf(str[0]) / 1024 / 1024; // convert into file's size (unit: MB)						// System.out.println(size + "MB");					}					if (s[0].endsWith("K")) {						str = s[0].split("K");						size = Float.valueOf(str[0]) / 1024; // convert into file's size (unit: MB)						// System.out.println(size + "MB");					}					if (s[0].endsWith("M")) {						str = s[0].split("M");						size = Float.valueOf(str[0]);						// System.out.println(size + "MB");					}					if (s[0].endsWith("G")) {						str = s[0].split("G");						size = Float.valueOf(str[0]) * 1024;						// System.out.println(size + "MB");					}				}			}			proc.destroy();		} catch (IOException e) {			e.printStackTrace();		}		return size;	}}*/